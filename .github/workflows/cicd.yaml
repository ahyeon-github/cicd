name: Java and AWS ECS CICD

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  CLUSTER_NAME: ECS-CICD-Cluster
  SERVICE_NAME: ecs-cicd-nginxservice
  TASK_FAMILY: ECS-CICD-Cluster-NginX-Task
  CONTAINER_NAME: ECS-CICD-Cluster-NginX-Container
  TASK_DEFINITION_FILE: ./ECS-CICD-Cluster-NginX-Task-revision3.json

jobs:
  build-and-deploy-to-ecr:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Spring Boot Application Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      # AWS 자격 증명 구성
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::615299736609:role/cicd
          role-session-name: cicdSession
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 이미지 빌드 및 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .

          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

          # 푸시된 이미지 정보 출력
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      # 태스크 정의 수정
      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_FILE }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.image }}

      # ECS 서비스 업데이트
      - name: Deploy to ECS
        run: |
          # 최신 태스크 정의 등록
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://${{ env.TASK_DEFINITION_FILE }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          
          echo "Task Revision: $TASK_REVISION"

          # ECS 서비스 업데이트
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition $TASK_REVISION \
            --force-new-deployment